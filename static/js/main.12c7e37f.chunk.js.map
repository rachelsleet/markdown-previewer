{"version":3,"sources":["Components/MarkdownPreviewer.js","App.js","serviceWorker.js","index.js"],"names":["MarkdownPreviewer","props","react_default","a","createElement","id","dangerouslySetInnerHTML","__html","marked","input","sampleInput","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","handleInput","bind","assertThisInitialized","e","setState","target","value","script","document","src","async","type","body","appendChild","console","log","className","onChange","MarkdownPreviewer_MarkdownPreviewer","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qRAGaA,EAAoB,SAACC,GAC5B,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,GAAG,UAAUC,wBAAyB,CAACC,OAAQC,IAAOP,EAAMQ,WCA1EC,SAAW,igBAoEAC,cAhDb,SAAAA,EAAYV,GAAO,IAAAW,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACjBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMd,KACDkB,MAAQ,CACXV,MAAOC,GAETE,EAAKQ,YAAcR,EAAKQ,YAAYC,KAAjBR,OAAAS,EAAA,EAAAT,QAAAS,EAAA,EAAAT,CAAAD,KALFA,2EAOPW,GACVR,KAAKS,SAAS,CACZf,MAAOc,EAAEE,OAAOC,oDAKd,IAAMC,EAASC,SAASxB,cAAc,UACtCuB,EAAOE,IAAM,kEACbF,EAAOG,OAAQ,EACfH,EAAOI,KAAO,kBACdH,SAASI,KAAKC,YAAYN,GAC1BO,QAAQC,IAAIR,oCAIhB,OACEzB,EAAAC,EAAAC,cAAA,OAAKgC,UAAU,OACblC,EAAAC,EAAAC,cAAA,oCAGAF,EAAAC,EAAAC,cAAA,OAAKC,GAAG,aACRH,EAAAC,EAAAC,cAAA,OAAKgC,UAAU,UACblC,EAAAC,EAAAC,cAAA,MAAIC,GAAG,gBAAP,UACAH,EAAAC,EAAAC,cAAA,OAAKgC,UAAU,OACblC,EAAAC,EAAAC,cAAA,YAAUC,GAAG,SAAS0B,KAAK,OAAOL,MAAOX,KAAKI,MAAMV,MAAO4B,SAAUtB,KAAKK,gBAG9ElB,EAAAC,EAAAC,cAAA,OAAKgC,UAAU,UACblC,EAAAC,EAAAC,cAAA,MAAIC,GAAG,iBAAP,aACAH,EAAAC,EAAAC,cAAA,OAAKgC,UAAU,MAAM/B,GAAG,eACtBH,EAAAC,EAAAC,cAACkC,EAAD,CAAmB7B,MAAOM,KAAKI,MAAMV,mBAvC/B8B,IAAMC,WCXJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO7C,EAAAC,EAAAC,cAAC4C,EAAD,MAASpB,SAASqB,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.12c7e37f.chunk.js","sourcesContent":["import React from 'react';\nimport marked from 'marked';\n\nexport const MarkdownPreviewer = (props) => {\n      return <div id=\"preview\" dangerouslySetInnerHTML={{__html: marked(props.input)}} />;\n}\n","import React from 'react';\nimport { MarkdownPreviewer } from './Components/MarkdownPreviewer';\nimport './App.css';\n\nlet sampleInput = ` a header (H1 size), a sub header (H2 size), a link, inline code, a code block, a list item, a blockquote, an image, and bolded text.\n\n# Header\n## Header 2\n[I work here](www.wayfair.co.uk)\n\\`\\`\\`\n<div></div>\n\\`\\`\\`\n- List 1\n  - List 2 \\`sneaky code\\`\n   - List 3\n\n >Blocking a quote!\n\n![Christian](https://scontent-frx5-1.xx.fbcdn.net/v/t1.0-9/49745714_2119476408108530_2252438745905102848_n.jpg?_nc_cat=101&_nc_ht=scontent-frx5-1.xx&oh=da603137e6bd1cc1551c0831d5511286&oe=5D1CA012)\n\n**pretty neat**\n`;\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      input: sampleInput\n    }\n    this.handleInput = this.handleInput.bind(this)\n  }\n  handleInput(e) {\n    this.setState({\n      input: e.target.value\n    })\n  }\n\n  componentDidMount() {\n        const script = document.createElement(\"script\");\n        script.src = \"https://cdn.freecodecamp.org/testable-projects-fcc/v1/bundle.js\";\n        script.async = true;\n        script.type = 'text/javascript'\n        document.body.appendChild(script);\n        console.log(script);\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header>\n          Markdown Previewer\n        </header>\n        <div id=\"container\">\n        <div className=\"column\">\n          <h2 id=\"editor-title\">Editor</h2>\n          <div className=\"box\">\n            <textarea id=\"editor\" type='text' value={this.state.input} onChange={this.handleInput}/>\n          </div>\n        </div>\n        <div className=\"column\">\n          <h2 id=\"preview-title\">Previewer</h2>\n          <div className=\"box\" id=\"preview-div\">\n            <MarkdownPreviewer input={this.state.input}/>\n          </div>\n        </div>\n        </div>\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}